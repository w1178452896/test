<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.taylorsfan.blog.repository.BlogMapper">
    <resultMap id="BaseResultMap" type="blog">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="create_time" jdbcType="VARCHAR" property="createTime"/>
        <result column="title" jdbcType="VARCHAR" property="title"/>
        <result column="content" jdbcType="VARCHAR" property="content"/>
        <result column="status" jdbcType="INTEGER" property="status"/>
    </resultMap>
    <sql id="Base_Column_List">
        id, create_time, title, content, status
    </sql>
    <select id="selectAll" resultMap="BaseResultMap">
        select * from blog
    </select>
    <select id="selectOneByPrimaryKey" parameterType="integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from blog
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="integer">
        delete from blog
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <insert id="insert" parameterType="com.taylorsfan.blog.model.Blog" keyProperty="id" useGeneratedKeys="true">
        insert into blog (id, create_time, title,
        content, status)
        values (#{id,jdbcType=INTEGER}, #{createTime,jdbcType=VARCHAR}, #{title,jdbcType=VARCHAR},
        #{content,jdbcType=VARCHAR}, #{status,jdbcType=INTEGER})
    </insert>
    <update id="updateByPrimaryKey" parameterType="blog">
        update blog
        set create_time = #{createTime,jdbcType=VARCHAR},
        title = #{title,jdbcType=VARCHAR},
        content = #{content,jdbcType=VARCHAR},
        status = #{status,jdbcType=INTEGER}
        where id = #{id,jdbcType=INTEGER}
    </update>
    <select id="selectAllByUserId" parameterType="integer" resultMap="BaseResultMap">
        select blog.* from blog,blog_like WHERE blog_like.blog_id = blog.id AND
        blog_like.user_id = #{userId}
    </select>
    <select id="selectAllByStatus" parameterType="integer" resultMap="BaseResultMap">
        select * from blog WHERE status = #{status}
    </select>
    <select id="selectAllBySortId" parameterType="integer" resultMap="BaseResultMap">
        select blog.* from blog,sort_blog WHERE sort_blog.sort_id =#{sortId} AND sort_blog.blog_id = blog.id
    </select>
    <select id="selectOneByCommentId" resultMap="BaseResultMap">
        select blog.* from blog,blog_comment WHERE blog.id = blog_comment.blog_id AND blog_comment.comment_id =
        #{commentId}
    </select>
    <select id="selectAllByUserIdAndStatus" parameterType="map" resultMap="BaseResultMap">
        select blog.* from blog,blog_like WHERE blog_like.blog_id = blog.id AND user_id = #{userId} AND blog.status =
        #{status}
    </select>
    <select id="selectAllCollectByUserIdAndSort" parameterType="integer" resultMap="BaseResultMap">
        select * from blog,user_collect WHERE user_collect.sort = 1 AND user_collect.collect_id = blog.id AND
        user_collect.user_id = #{userId}
    </select>
</mapper>